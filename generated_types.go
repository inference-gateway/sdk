// Package sdk provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package sdk

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ChatCompletionChoiceFinishReason.
const (
	ContentFilter ChatCompletionChoiceFinishReason = "content_filter"
	FunctionCall  ChatCompletionChoiceFinishReason = "function_call"
	Length        ChatCompletionChoiceFinishReason = "length"
	Stop          ChatCompletionChoiceFinishReason = "stop"
	ToolCalls     ChatCompletionChoiceFinishReason = "tool_calls"
)

// Defines values for ChatCompletionToolType.
const (
	Function ChatCompletionToolType = "function"
)

// Defines values for MessageRole.
const (
	Assistant MessageRole = "assistant"
	System    MessageRole = "system"
	Tool      MessageRole = "tool"
	User      MessageRole = "user"
)

// Defines values for Provider.
const (
	Anthropic  Provider = "anthropic"
	Cloudflare Provider = "cloudflare"
	Cohere     Provider = "cohere"
	Deepseek   Provider = "deepseek"
	Google     Provider = "google"
	Groq       Provider = "groq"
	Mistral    Provider = "mistral"
	Ollama     Provider = "ollama"
	Openai     Provider = "openai"
)

// Defines values for SSEventEvent.
const (
	ContentDelta SSEventEvent = "content-delta"
	ContentEnd   SSEventEvent = "content-end"
	ContentStart SSEventEvent = "content-start"
	MessageEnd   SSEventEvent = "message-end"
	MessageStart SSEventEvent = "message-start"
	StreamEnd    SSEventEvent = "stream-end"
	StreamStart  SSEventEvent = "stream-start"
)

// A2AAgentCard An AgentCard conveys key information:
// - Overall details (version, name, description, uses)
// - Skills: A set of capabilities the agent can perform
// - Default modalities/content types supported by the agent.
// - Authentication requirements
type A2AAgentCard struct {
	// Capabilities Optional capabilities supported by the agent.
	Capabilities map[string]interface{} `json:"capabilities"`

	// DefaultInputModes The set of interaction modes that the agent supports across all skills. This can be overridden per-skill.
	// Supported media types for input.
	DefaultInputModes []string `json:"defaultInputModes"`

	// DefaultOutputModes Supported media types for output.
	DefaultOutputModes []string `json:"defaultOutputModes"`

	// Description A human-readable description of the agent. Used to assist users and
	// other agents in understanding what the agent can do.
	Description string `json:"description"`

	// DocumentationUrl A URL to documentation for the agent.
	DocumentationUrl *string `json:"documentationUrl,omitempty"`

	// IconUrl A URL to an icon for the agent.
	IconUrl *string `json:"iconUrl,omitempty"`

	// Id Unique identifier for the agent (base64-encoded SHA256 hash of the agent URL).
	Id string `json:"id"`

	// Name Human readable name of the agent.
	Name string `json:"name"`

	// Provider The service provider of the agent
	Provider *map[string]interface{} `json:"provider,omitempty"`

	// Security Security requirements for contacting the agent.
	Security *[]map[string]interface{} `json:"security,omitempty"`

	// SecuritySchemes Security scheme details used for authenticating with this agent.
	SecuritySchemes *map[string]interface{} `json:"securitySchemes,omitempty"`

	// Skills Skills are a unit of capability that an agent can perform.
	Skills []map[string]interface{} `json:"skills"`

	// SupportsAuthenticatedExtendedCard true if the agent supports providing an extended agent card when the user is authenticated.
	// Defaults to false if not specified.
	SupportsAuthenticatedExtendedCard *bool `json:"supportsAuthenticatedExtendedCard,omitempty"`

	// Url A URL to the address the agent is hosted at.
	Url string `json:"url"`

	// Version The version of the agent - format is up to the provider.
	Version string `json:"version"`
}

// ChatCompletionChoice defines model for ChatCompletionChoice.
type ChatCompletionChoice struct {
	// FinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
	// `length` if the maximum number of tokens specified in the request was reached,
	// `content_filter` if content was omitted due to a flag from our content filters,
	// `tool_calls` if the model called a tool.
	FinishReason ChatCompletionChoiceFinishReason `json:"finish_reason"`

	// Index The index of the choice in the list of choices.
	Index int `json:"index"`

	// Message Message structure for provider requests
	Message Message `json:"message"`
}

// ChatCompletionChoiceFinishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
// `length` if the maximum number of tokens specified in the request was reached,
// `content_filter` if content was omitted due to a flag from our content filters,
// `tool_calls` if the model called a tool.
type ChatCompletionChoiceFinishReason string

// ChatCompletionMessageToolCall defines model for ChatCompletionMessageToolCall.
type ChatCompletionMessageToolCall struct {
	// Function The function that the model called.
	Function ChatCompletionMessageToolCallFunction `json:"function"`

	// Id The ID of the tool call.
	Id string `json:"id"`

	// Type The type of the tool. Currently, only `function` is supported.
	Type ChatCompletionToolType `json:"type"`
}

// ChatCompletionMessageToolCallFunction The function that the model called.
type ChatCompletionMessageToolCallFunction struct {
	// Arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
	Arguments string `json:"arguments"`

	// Name The name of the function to call.
	Name string `json:"name"`
}

// ChatCompletionStreamOptions Options for streaming response. Only set this when you set `stream: true`.
type ChatCompletionStreamOptions struct {
	// IncludeUsage If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.
	IncludeUsage bool `json:"include_usage"`
}

// ChatCompletionTool defines model for ChatCompletionTool.
type ChatCompletionTool struct {
	Function FunctionObject `json:"function"`

	// Type The type of the tool. Currently, only `function` is supported.
	Type ChatCompletionToolType `json:"type"`
}

// ChatCompletionToolType The type of the tool. Currently, only `function` is supported.
type ChatCompletionToolType string

// CompletionUsage Usage statistics for the completion request.
type CompletionUsage struct {
	// CompletionTokens Number of tokens in the generated completion.
	CompletionTokens int64 `json:"completion_tokens"`

	// PromptTokens Number of tokens in the prompt.
	PromptTokens int64 `json:"prompt_tokens"`

	// TotalTokens Total number of tokens used in the request (prompt + completion).
	TotalTokens int64 `json:"total_tokens"`
}

// CreateChatCompletionRequest defines model for CreateChatCompletionRequest.
type CreateChatCompletionRequest struct {
	// MaxTokens An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens.
	MaxTokens *int `json:"max_tokens,omitempty"`

	// Messages A list of messages comprising the conversation so far.
	Messages []Message `json:"messages"`

	// Model Model ID to use
	Model string `json:"model"`

	// ReasoningFormat The format of the reasoning content. Can be `raw` or `parsed`.
	// When specified as raw some reasoning models will output <think /> tags. When specified as parsed the model will output the reasoning under  `reasoning` or `reasoning_content` attribute.
	ReasoningFormat *string `json:"reasoning_format,omitempty"`

	// Stream If set to true, the model response data will be streamed to the client as it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).
	Stream *bool `json:"stream,omitempty"`

	// StreamOptions Options for streaming response. Only set this when you set `stream: true`.
	StreamOptions *ChatCompletionStreamOptions `json:"stream_options,omitempty"`

	// Tools A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
	Tools *[]ChatCompletionTool `json:"tools,omitempty"`
}

// CreateChatCompletionResponse Represents a chat completion response returned by model, based on the provided input.
type CreateChatCompletionResponse struct {
	// Choices A list of chat completion choices. Can be more than one if `n` is greater than 1.
	Choices []ChatCompletionChoice `json:"choices"`

	// Created The Unix timestamp (in seconds) of when the chat completion was created.
	Created int `json:"created"`

	// Id A unique identifier for the chat completion.
	Id string `json:"id"`

	// Model The model used for the chat completion.
	Model string `json:"model"`

	// Object The object type, which is always `chat.completion`.
	Object string `json:"object"`

	// Usage Usage statistics for the completion request.
	Usage *CompletionUsage `json:"usage,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error *string `json:"error,omitempty"`
}

// FunctionObject defines model for FunctionObject.
type FunctionObject struct {
	// Description A description of what the function does, used by the model to choose when and how to call the function.
	Description *string `json:"description,omitempty"`

	// Name The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`

	// Parameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
	// Omitting `parameters` defines a function with an empty parameter list.
	Parameters *FunctionParameters `json:"parameters,omitempty"`

	// Strict Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
	Strict *bool `json:"strict,omitempty"`
}

// FunctionParameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
// Omitting `parameters` defines a function with an empty parameter list.
type FunctionParameters map[string]interface{}

// ListAgentsResponse Response structure for listing A2A agents
type ListAgentsResponse struct {
	// Data Array of available A2A agents
	Data []A2AAgentCard `json:"data"`

	// Object Always "list"
	Object string `json:"object"`
}

// ListModelsResponse Response structure for listing models
type ListModelsResponse struct {
	Data     []Model   `json:"data"`
	Object   string    `json:"object"`
	Provider *Provider `json:"provider,omitempty"`
}

// ListToolsResponse Response structure for listing MCP tools
type ListToolsResponse struct {
	// Data Array of available MCP tools
	Data []MCPTool `json:"data"`

	// Object Always "list"
	Object string `json:"object"`
}

// MCPTool An MCP tool definition
type MCPTool struct {
	// Description A description of what the tool does
	Description string `json:"description"`

	// InputSchema JSON schema for the tool's input parameters
	InputSchema *map[string]interface{} `json:"input_schema,omitempty"`

	// Name The name of the tool
	Name string `json:"name"`

	// Server The MCP server that provides this tool
	Server string `json:"server"`
}

// Message Message structure for provider requests
type Message struct {
	Content string `json:"content"`

	// Reasoning The reasoning of the chunk message. Same as reasoning_content.
	Reasoning *string `json:"reasoning,omitempty"`

	// ReasoningContent The reasoning content of the chunk message.
	ReasoningContent *string `json:"reasoning_content,omitempty"`

	// Role Role of the message sender
	Role       MessageRole                      `json:"role"`
	ToolCallId *string                          `json:"tool_call_id,omitempty"`
	ToolCalls  *[]ChatCompletionMessageToolCall `json:"tool_calls,omitempty"`
}

// MessageRole Role of the message sender
type MessageRole string

// Model Common model information
type Model struct {
	Created  int64    `json:"created"`
	Id       string   `json:"id"`
	Object   string   `json:"object"`
	OwnedBy  string   `json:"owned_by"`
	ServedBy Provider `json:"served_by"`
}

// Provider defines model for Provider.
type Provider string

// ProviderSpecificResponse Provider-specific response format. Examples:
//
// OpenAI GET /v1/models?provider=openai response:
// ```json
//
//	{
//	  "provider": "openai",
//	  "object": "list",
//	  "data": [
//	    {
//	      "id": "gpt-4",
//	      "object": "model",
//	      "created": 1687882410,
//	      "owned_by": "openai",
//	      "served_by": "openai"
//	    }
//	  ]
//	}
//
// ```
//
// Anthropic GET /v1/models?provider=anthropic response:
// ```json
//
//	{
//	  "provider": "anthropic",
//	  "object": "list",
//	  "data": [
//	    {
//	      "id": "gpt-4",
//	      "object": "model",
//	      "created": 1687882410,
//	      "owned_by": "openai",
//	      "served_by": "openai"
//	    }
//	  ]
//	}
//
// ```
type ProviderSpecificResponse = map[string]interface{}

// SSEvent defines model for SSEvent.
type SSEvent struct {
	Data  *[]byte       `json:"data,omitempty"`
	Event *SSEventEvent `json:"event,omitempty"`
	Retry *int          `json:"retry,omitempty"`
}

// SSEventEvent defines model for SSEvent.Event.
type SSEventEvent string

// A2ANotExposed defines model for A2ANotExposed.
type A2ANotExposed = Error

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalError defines model for InternalError.
type InternalError = Error

// MCPNotExposed defines model for MCPNotExposed.
type MCPNotExposed = Error

// ProviderResponse Provider-specific response format. Examples:
//
// OpenAI GET /v1/models?provider=openai response:
// ```json
//
//	{
//	  "provider": "openai",
//	  "object": "list",
//	  "data": [
//	    {
//	      "id": "gpt-4",
//	      "object": "model",
//	      "created": 1687882410,
//	      "owned_by": "openai",
//	      "served_by": "openai"
//	    }
//	  ]
//	}
//
// ```
//
// Anthropic GET /v1/models?provider=anthropic response:
// ```json
//
//	{
//	  "provider": "anthropic",
//	  "object": "list",
//	  "data": [
//	    {
//	      "id": "gpt-4",
//	      "object": "model",
//	      "created": 1687882410,
//	      "owned_by": "openai",
//	      "served_by": "openai"
//	    }
//	  ]
//	}
//
// ```
type ProviderResponse = ProviderSpecificResponse

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// ProviderRequest defines model for ProviderRequest.
type ProviderRequest struct {
	Messages *[]struct {
		Content *string `json:"content,omitempty"`
		Role    *string `json:"role,omitempty"`
	} `json:"messages,omitempty"`
	Model       *string  `json:"model,omitempty"`
	Temperature *float32 `json:"temperature,omitempty"`
}

// CreateChatCompletionParams defines parameters for CreateChatCompletion.
type CreateChatCompletionParams struct {
	// Provider Specific provider to use (default determined by model)
	Provider *Provider `form:"provider,omitempty" json:"provider,omitempty"`
}

// ListModelsParams defines parameters for ListModels.
type ListModelsParams struct {
	// Provider Specific provider to query (optional)
	Provider *Provider `form:"provider,omitempty" json:"provider,omitempty"`
}

// ProxyPatchJSONBody defines parameters for ProxyPatch.
type ProxyPatchJSONBody struct {
	Messages *[]struct {
		Content *string `json:"content,omitempty"`
		Role    *string `json:"role,omitempty"`
	} `json:"messages,omitempty"`
	Model       *string  `json:"model,omitempty"`
	Temperature *float32 `json:"temperature,omitempty"`
}

// ProxyPostJSONBody defines parameters for ProxyPost.
type ProxyPostJSONBody struct {
	Messages *[]struct {
		Content *string `json:"content,omitempty"`
		Role    *string `json:"role,omitempty"`
	} `json:"messages,omitempty"`
	Model       *string  `json:"model,omitempty"`
	Temperature *float32 `json:"temperature,omitempty"`
}

// ProxyPutJSONBody defines parameters for ProxyPut.
type ProxyPutJSONBody struct {
	Messages *[]struct {
		Content *string `json:"content,omitempty"`
		Role    *string `json:"role,omitempty"`
	} `json:"messages,omitempty"`
	Model       *string  `json:"model,omitempty"`
	Temperature *float32 `json:"temperature,omitempty"`
}

// CreateChatCompletionJSONRequestBody defines body for CreateChatCompletion for application/json ContentType.
type CreateChatCompletionJSONRequestBody = CreateChatCompletionRequest

// ProxyPatchJSONRequestBody defines body for ProxyPatch for application/json ContentType.
type ProxyPatchJSONRequestBody ProxyPatchJSONBody

// ProxyPostJSONRequestBody defines body for ProxyPost for application/json ContentType.
type ProxyPostJSONRequestBody ProxyPostJSONBody

// ProxyPutJSONRequestBody defines body for ProxyPut for application/json ContentType.
type ProxyPutJSONRequestBody ProxyPutJSONBody
